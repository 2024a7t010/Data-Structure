#include<stdio.h>
#include<stdlib.h>
typedef struct node{
    int data;
    struct node* next;
}node;
struct node* top=NULL;
void push(int value){
    struct node* temp=(struct node*)malloc(sizeof(struct node));
    if(temp==NULL) printf("Stack overflow!!!!\n");
   
    else{
        
        temp->data=value;
        temp->next=top;
        top=temp;
        printf("%d Element pushed!!!!\n",value);
    }
}
int pop(){
    if(top==NULL){
        printf("Stack is underflow!!!!\n");
        return -1;
    }
    else{
        struct node *temp=top;
        top=top->next;
        int val=temp->data;
        free(temp);
        return val;
    }
}
int peek(){
    if(top==NULL){
        printf("Stack is empty!!!!\n");
        return -1;
    }
    else{
        return top->data;
    }
}
void show(){
    if(top==NULL) printf("Stack is Empty!!!\n");
    else{
        node* temp=top;
        while(temp!=NULL){
            printf("%d",temp->data);
            temp=temp->next;
        }
        printf("\n");
    }
}
int main(){
    printf("-------Stack-------\n");
    printf("1.Push\n");
    printf("2.Pop\n");
    printf("3.Peek\n");
    printf("4.Show\n");
    printf("5.Exit\n");
    while(1){
        int a,val,res;
        scanf("%d",&a);
        switch(a){
            case 1:
                scanf("%d",&val);
                push(val);
                break;
            case 2:
                res=pop();
                if(res!=-1)
                    printf("%d pop from the stack\n",res);
                break;
            case 3:
                res=peek();
                if(res!=-1) 
                    printf("Stack top element is &d\n",res);
                break;
            case 4:
                show();
                break;
            case 5:
                exit(0);
                break;
            default:
                printf("Invalid Number!!!!\n");
        }
    }
    return 0;
}
